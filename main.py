#import sys
#from pathlib import Path
#sys.path.append(str(Path(__file__).parent.parent))
import asyncio
from aiogram import Bot, Dispatcher, F, types, Router
from aiogram.types import Message, FSInputFile, CallbackQuery
from src.config import config
from src.DB import *
from src.BOT import *
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import logging
import aiofiles
from aiogram.methods import DeleteWebhook
from mistralai import Mistral

Admins = [config.Admin]

class Form(StatesGroup):
    waiting_for_message = State()

class Form1(StatesGroup):
    waiting_for_mess = State()


logging.basicConfig(level=logging.INFO)

photo0="Donor.jpeg"


router = Router()
bot = Bot(config.Bot_Tocken.get_secret_value())
Api_Key=config.API_KEY.get_secret_value()
dp = Dispatcher()
model = "mistral-small-latest"
client = Mistral(api_key=Api_Key)
dp.include_router(router)


@dp.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await message.answer_photo(photo=FSInputFile(photo0), caption='''üöÄ –ü—Ä–∏–≤–µ—Ç! –Ø –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ò–ò –±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –¥–æ–Ω–æ—Ä–∞–º–∏ –≤ –í–£–ó–µ! –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Å–µ –ø—Ä–æ –¥–æ–Ω–æ—Ä—Å–∫–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ –∏ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.    
                                   
–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–∏ —Å–≤–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µüëá''', reply_markup=Agree) # /check üìå –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–µ –§–ò–û, –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –æ—Ç–≤–æ–¥—ã –µ—Å–ª–∏ –µ—Å—Ç—å –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    telegram_id = message.from_user.id
    await add_user(telegram_id)








@dp.callback_query(F.data == "agree")
async def edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    telegram_id = callback.from_user.id
    # await callback.message.answer(f"{telegram_id}")
    await callback.message.answer("–í—ã –¥–∞–ª–∏ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    await edit_agree(telegram_id)

    # info = await get_contact(telegram_id)
    # await callback.message.answer(f"{info}")
    # if info == '-' or info == '':
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–≤ —Ñ–æ—Ä–º–∞—Ç–µ: 71234567890, –±–µ–∑ +, —Å—Ç—Ä–æ–≥–æ 11 —Ü–∏—Ñ—Ä) –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
    await state.update_data(last_command="start")
    await state.set_state(Form.waiting_for_message)





@dp.message(Form.waiting_for_message)
async def cmd_start(message: Message, state: FSMContext):
    chat_response = client.chat.complete(
        model= model,
        messages = [
            {
                "role": "system",
                "content": "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –¥–æ—Å—Ç–∞—Ç—å –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –§–ò–û, –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–±–µ–∑ + –ø—Ä–æ—Å—Ç–æ 11 —Ü–∏—Ñ—Ä). –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –§–ò–û:\n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n",
            },
            {
                "role": "user",
                "content": message.text,
            },
        ]
    )

    # –µ—Å–ª–∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –æ—Ç–≤–æ–¥–æ–≤ –Ω–µ—Ç, —Ç–æ –≤ –ë–î –ø–æ–π–¥–µ—Ç - 0, –∏–Ω–∞—á–µ 1

    telegram_id = message.from_user.id
    FNS = chat_response.choices[0].message.content.split('\n')[0].split(':')[1]
    Phone_num = chat_response.choices[0].message.content.split('\n')[1].split(':')[1]
    
    await message.answer(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {Phone_num}\n–§–ò–û: {FNS}", reply_markup=Edit)
    await edit_two_fields(Phone_num, FNS, telegram_id)

    await state.clear()










@dp.callback_query(F.data == "edit_name")
async def edit(callback: CallbackQuery, state: FSMContext):
    await state.update_data(last_command="edit_name")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –§–ò–û")
    await state.set_state(Form1.waiting_for_mess)


@dp.callback_query(F.data == "edit_phone")
async def edit(callback: CallbackQuery, state: FSMContext):
    await state.update_data(last_command="edit_phone")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await state.set_state(Form1.waiting_for_mess)




@dp.callback_query(F.data == "good")
async def edit(callback: CallbackQuery):
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–ª—è –≤–∞—Å –¥–∞—Ç—É –Ω–∏–∂–µüëá\n\n(P.S. –µ—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å - –º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /edit, –∞ —Ç–∞–∫ –∂–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É - /help)", reply_markup=Date)



@dp.callback_query(F.data == "20.07.2025")
async def edit(callback: CallbackQuery):
    date = callback.data
    telegram_id = callback.from_user.id

    if await get_date(telegram_id) != date:
        edit_last_blood_center(await get_date(telegram_id), telegram_id)

    telegram_id = callback.from_user.id
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ 20.07.2025 –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞—Ç—ã", reply_markup=CS)
    date = "20.07.2025"
    await edit_Date(date, telegram_id)



@dp.callback_query(F.data == "30.07.2025")
async def edit(callback: CallbackQuery):
    date = callback.data
    telegram_id = callback.from_user.id

    if await get_date(telegram_id) != date:
        edit_last_blood_center(await get_date(telegram_id), telegram_id)

    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ 30.07.2025 –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¥–∞—Ç—ã", reply_markup=CS)
    date = "30.07.2025"
    await edit_Date(date, telegram_id)






@dp.callback_query(F.data == "CB1")
async def edit(callback: CallbackQuery):
    CB = callback.data
    telegram_id = callback.from_user.id

    if await get_CB(telegram_id) != CB:
        edit_last_blood_center(await get_CB(telegram_id), telegram_id)

    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –¶–ö 1 –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¶–µ–Ω—Ç—Ä–∞ –ö—Ä–æ–≤–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –≤—ã —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞", reply_markup=Donor)
    CB = "CB1"
    await edit_blood_center(CB, telegram_id)



@dp.callback_query(F.data == "CB2")
async def edit(callback: CallbackQuery):
    CB = callback.data
    telegram_id = callback.from_user.id

    if await get_CB(telegram_id) != CB:
        edit_last_blood_center(await get_CB(telegram_id), telegram_id)
        
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n–í—ã –≤—ã–±—Ä–∞–ª–∏ –¶–ö 2 –≤ –∫–∞—á–µ—Å—Ç–≤–µ –¶–µ–Ω—Ç—Ä–∞ –ö—Ä–æ–≤–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫–æ–π –≤—ã —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞", reply_markup=Donor)
    CB = "CB2"
    await edit_blood_center(CB, telegram_id)




















@dp.callback_query(F.data == "mess_admin")
async def edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await state.update_data(last_command="mess_admin")
    await state.set_state(Form1.waiting_for_mess)




@dp.callback_query(F.data == "edit_date")
async def edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", reply_markup=Date)




@dp.message(Command("admin_panel"))
async def edit(message: Message):
    if message.from_user.id in Admins:
        await message.answer("Admin –ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=admin)
    else:
        await message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return



@dp.callback_query(F.data == "message")
async def edit(callback: CallbackQuery):
    if callback.from_user.id in Admins:
        await callback.message.answer("Admin –ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é —Ä–∞—Å—Å—ã–ª–∫—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=admin_message)
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return



@dp.callback_query(F.data == "edit_info")
async def edit(callback: CallbackQuery):
    if callback.message.from_user.id in Admins:
        await callback.message.answer("Admin –ø–∞–Ω–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", reply_markup=admin_edit)
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return










@dp.callback_query(F.data == "admin_edit_name")
async def edit(callback: CallbackQuery, state: FSMContext):
    if callback.message.from_user.id in Admins:
        await callback.message.answer("Admin, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 215346356(telegramid), –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–∞—Å–∏–º–æ–µ –≤ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_edit)
        await state.update_data(last_command="admin_edit_name")
        await state.set_state(Form1.waiting_for_mess)
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return
    

@dp.callback_query(F.data == "admin_edit_phone")
async def edit(callback: CallbackQuery, state: FSMContext):
    if callback.message.from_user.id in Admins:
        await callback.message.answer("Admin, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 215346356(telegramid), –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–∞—Å–∏–º–æ–µ –≤ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_edit)
        await state.update_data(last_command="admin_edit_phone")
        await state.set_state(Form1.waiting_for_mess)
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return

@dp.callback_query(F.data == "admin_edit_type")
async def edit(callback: CallbackQuery, state: FSMContext):
    if callback.message.from_user.id in Admins:
        await callback.message.answer("Admin, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 215346356(telegramid), –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–∞—Å–∏–º–æ–µ –≤ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_edit)
        await state.update_data(last_command="admin_edit_type")
        await state.set_state(Form1.waiting_for_mess)
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return

    
@dp.callback_query(F.data == "admin_edit_DON")
async def edit(callback: CallbackQuery, state: FSMContext):
    if callback.message.from_user.id in Admins:
        await callback.message.answer("Admin, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 215346356(telegramid), –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–∞—Å–∏–º–æ–µ –≤ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_edit)
        await state.update_data(last_command="admin_edit_DON")
        await state.set_state(Form1.waiting_for_mess)
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return
    

@dp.callback_query(F.data == "admin_edit_last_don")
async def edit(callback: CallbackQuery, state: FSMContext):
    if callback.message.from_user.id in Admins:
        await callback.message.answer("Admin, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 215346356(telegramid)| –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–∞—Å–∏–º–æ–µ –≤ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_edit)
        await state.update_data(last_command="admin_edit_last_don")
        await state.set_state(Form1.waiting_for_mess)
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return
    
@dp.callback_query(F.data == "admin_edit_CB")
async def edit(callback: CallbackQuery, state: FSMContext):
    if callback.message.from_user.id in Admins:
        await callback.message.answer("Admin, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 215346356(telegramid), –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–∞—Å–∏–º–æ–µ –≤ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_edit)
        await state.update_data(last_command="admin_edit_CB")
        await state.set_state(Form1.waiting_for_mess)    
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return
    

@dp.callback_query(F.data == "admin_edit_last_CB")
async def edit(callback: CallbackQuery, state: FSMContext):
    if callback.message.from_user.id in Admins:
        await callback.message.answer("Admin, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 215346356(telegramid), –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–∞—Å–∏–º–æ–µ –≤ —Ç–∞–±–ª–∏—Ü—É", reply_markup=admin_edit)
        await state.update_data(last_command="admin_edit_last_CB")
        await state.set_state(Form1.waiting_for_mess)    
    else:
        await callback.message.answer("–í—ã –Ω–µ –∞–¥–º–∏–Ω:(")
        return





























@dp.callback_query(F.data == "student")
async def edit(callback: CallbackQuery, state: FSMContext):
    
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞ - –°—Ç—É–¥–µ–Ω—Ç, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
    await state.update_data(last_command="edit_group")
    await state.set_state(Form1.waiting_for_mess)



@dp.callback_query(F.data == "stuff")
async def edit(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id

    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞ - –°–æ—Ç—Ä—É–¥–Ω–∏–∫, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
    await edit_type_stuff(telegram_id)



@dp.callback_query(F.data == "different")
async def edit(callback: CallbackQuery, state: FSMContext):
    telegram_id = callback.from_user.id

    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø –¥–æ–Ω–æ—Ä–∞ - –í–Ω–µ—à–Ω–∏–π –¥–æ–Ω–æ—Ä, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
    await edit_type_different(telegram_id)



















@dp.callback_query(F.data == "wr_user")
async def edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ Telegram id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –ø–∏—à–µ–º\n\n–í —Ñ–æ—Ä–º–∞—Ç–µ: 111111111, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    await state.update_data(last_command="get_id")
    await state.set_state(Form1.waiting_for_mess)





@dp.callback_query(F.data == "wr_all")
async def edit(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    await state.update_data(last_command="wr_all")
    await state.set_state(Form1.waiting_for_mess)




@dp.callback_query(F.data == "student")
async def student(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã")
    await state.update_data(last_command="edit_group")
    await state.set_state(Form1.waiting_for_mess)





@dp.message(Command("help"))
async def edit(message: Message, state: FSMContext):
    # await message.answer(f"{await get_agree(message.from_user.id)}")
    if await get_agree(message.from_user.id) != 1:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
        return

    await message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∏–∂–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    await state.update_data(last_command="mess_admin")
    await state.set_state(Form1.waiting_for_mess)




@dp.message(Command("edit"))
async def edit(message: Message, state: FSMContext):
    if await get_agree(message.from_user.id) != 1:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
        return

    telegram_id = message.from_user.id
    info = await get_data(telegram_id)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ü–∏—é –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é\n\n–§–ò–û:{info[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info[1]}\n–î–∞—Ç–∞: {info[2]}\n–¶–µ–Ω—Ç—Ä –ö—Ä–æ–≤–∏: {info[3]}\n\n–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—åüëá", reply_markup=Editss)





@dp.message(Form1.waiting_for_mess)#(Form1.waiting_for_mess, F.text, F.photo)
async def handle_user_media(message: Message, state: FSMContext): # , state: FSMContext
    req = message.text
    telegram_id = message.from_user.id

    state_data = await state.get_data()
    last_command = state_data.get('last_command')

    if last_command == "mess_admin":
    
        group=-1002762829858# id –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã

        info = await get_data(telegram_id)

        await bot.send_message(group, f"–§–ò–û:{info[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info[1]}\n–î–∞—Ç–∞: {info[2]}\n\n{req}")

        await message.answer("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω! –ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º —Å–∫–æ—Ä–æ.")


    elif last_command == "edit_name":
        await edit_FNS(req, telegram_id)
        await message.answer(f"–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {req}")



    elif last_command == "wr_all":
        users = await get_users()

        for id in users:
            await bot.send_message(chat_id=id, text=req)
            # await message.answer(f"{id}")
    

    elif last_command == "get_id":
        user = req.split("|")[0]
        mess = req.split("|")[1]
        await bot.send_message(user, mess)


    elif last_command == "edit_phone":
        await edit_phone(req, telegram_id)
        if edit_phone:
            await message.answer(f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {req}")
        else:
            await message.answer(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ")


    elif last_command == "edit_group":
        await edit_group(req, telegram_id)
        if edit_phone:
            await message.answer(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {req}")
        else:
            await message.answer(f"–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–¥–Ω–µ–µ")


    elif last_command == "admin_edit_name":
        telegram_id = req.strip(',')[0]
        data = req.strip(',')[1]
        await edit_FNS(data, telegram_id)


    elif last_command == "admin_edit_phone":
        telegram_id = req.strip(',')[0]
        data = req.strip(',')[1]
        await edit_phone(data, telegram_id)


    elif last_command == "admin_edit_type":
        telegram_id = req.strip(',')[0]
        data = req.strip(',')[1]
        await edit_group(data, telegram_id)

    # elif last_command == "admin_edit_DON":
    #     telegram_id = req.strip(',')[0]
    #     data = req.strip(',')[1]
    #     await edit_don(data, telegram_id)

    elif last_command == "admin_edit_last_don":
        telegram_id = req.strip(',')[0]
        data = req.strip(',')[1]
        await edit_last_don(data, telegram_id)


    elif last_command == "admin_edit_CB":
        telegram_id = req.strip(',')[0]
        data = req.strip(',')[1]
        await edit_blood_center(data, telegram_id)


    elif last_command == "admin_edit_last_CB":
        telegram_id = req.strip(',')[0]
        data = req.strip(',')[1]
        await edit_last_blood_center(data, telegram_id)


    await state.clear()








@dp.message(Command('myinfo'))
async def send_my_info(message: types.Message):
    if await get_agree(message.from_user.id) != 1:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
        return

    # telegram_id = message.from_user.id
    # info = await get_data(telegram_id)
    # await message.answer(f"{info}")#–§–ò–û:{info[0]}\n–î–∞—Ç–∞: {info[1]}", reply_markup=Editss)

    telegram_id = message.from_user.id
    info = await get_data(telegram_id)
    await message.answer(f"–§–ò–û:{info[0]}\n–¢–µ–ª–µ—Ñ–æ–Ω: {info[1]}\n–î–∞—Ç–∞: {info[2]}\n–¶–µ–Ω—Ç—Ä –ö—Ä–æ–≤–∏: {info[3]}\n\n–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—åüëá", reply_markup=Editss)





@dp.message(Command('info'))
async def send_my_info(message: types.Message):
    if await get_agree(message.from_user.id) != 1:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
        return

    # telegram_id = message.from_user.id
    # info = await get_data(telegram_id)
    # await message.answer(f"{info}")#–§–ò–û:{info[0]}\n–î–∞—Ç–∞: {info[1]}", reply_markup=Editss)


    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç", reply_markup=Info)








@dp.callback_query(F.data == 'Need')
async def info1(callback: CallbackQuery):    
    file = "src/Need.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")









@dp.callback_query(F.data == 'Donor')
async def info1(callback: CallbackQuery):    
    file = "src/Donor.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")



@dp.callback_query(F.data == 'Donor')
async def info1(callback: CallbackQuery):    
    file = "src/Donor.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")





@dp.callback_query(F.data == 'Food')
async def info1(callback: CallbackQuery):    
    file = "src/Food.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")




@dp.callback_query(F.data == 'Infect')
async def info1(callback: CallbackQuery):    
    file = "src/Infect.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")





@dp.callback_query(F.data == 'Vremen')
async def info1(callback: CallbackQuery):    
    file = "src/Vremen.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")




@dp.callback_query(F.data == 'Donor_brain')
async def info1(callback: CallbackQuery):    
    file = "src/Donor_brain.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")






@dp.callback_query(F.data == 'Donor_brain')
async def info1(callback: CallbackQuery):    
    file = "src/Donor_brain.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")









@dp.callback_query(F.data == 'Postupi')
async def info1(callback: CallbackQuery):    
    file = "src/Postupi.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()


    await callback.message.answer(f"{content}")





@dp.callback_query(F.data == 'Donate')
async def info1(callback: CallbackQuery):    
    file = "src/Donate.txt"

    async with aiofiles.open(file, 'r', encoding='utf-8') as f:
        content = await f.read()

    file1 = "src/Donate1.txt"

    async with aiofiles.open(file1, 'r', encoding='utf-8') as f:
        content1 = await f.read()

    await callback.message.answer(f"{content}")
    await callback.message.answer(f"{content1}")










async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    
    webhook_info = await bot.get_webhook_info()
    print(f"Webhook status: {webhook_info.url or 'NOT ACTIVE'}")
    
    await dp.start_polling(bot)






if __name__ == "__main__":
    # asyncio.run(dp.start_polling(bot))
    asyncio.run(main())
